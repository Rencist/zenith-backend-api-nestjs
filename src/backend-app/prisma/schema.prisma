// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// For Authentication

enum Role {
  ADMIN
  PASIEN
}

model Pasien {
  id           String         @id @default(uuid())
  fullname     String
  no_telp      String         @unique
  alamat       String
  password     String
  foto         String         @db.VarChar(255)
  role         Role           @default(PASIEN)
  shortens     Shorten[]
  loginAttempt Login_Attempt?
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime       @default(now())
  Check_In     Check_In[]
}

model Gejala {
  id              String            @id @default(uuid())
  name            String            @unique
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime          @default(now())
  Check_In_Gejala Check_In_Gejala[]
}

model Check_In {
  id              String            @id @default(uuid())
  penyakit        String            @unique
  pasien_id       String            @default(uuid())
  pasienId        Pasien?           @relation(fields: [pasien_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime          @default(now())
  Check_In_Gejala Check_In_Gejala[]
}

model Check_In_Gejala {
  id          String    @id @default(uuid())
  gejala_id   String    @default(uuid())
  check_in_id String    @default(uuid())
  gejalaId    Gejala?   @relation(fields: [gejala_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  checkInId   Check_In? @relation(fields: [check_in_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime  @default(now())
}

model Login_Attempt {
  id           Int       @id @default(autoincrement())
  pasienId     String    @unique
  pasien       Pasien?   @relation(fields: [pasienId], references: [id])
  limitTime    DateTime?
  countAttempt Int
}

// Url Shortener

model Shorten {
  id         Int       @id @default(autoincrement())
  url        String    @db.VarChar(255)
  alias      String    @unique @db.VarChar(255)
  expiration DateTime?
  pasienId   String

  createdBy Pasien?  @relation(fields: [pasienId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
}
